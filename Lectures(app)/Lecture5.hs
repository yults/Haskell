module Lecture4 (main) where
    
import Numeric.Natural ( Natural )
import Lib ()
main :: IO()
main = putStrLn "Basic typeclasses: Monoid. Functor. Applicative"

Монада контейнер для вычислений 
Цепочки вычислений 
Апликатив (который функтор)
тривиальным способом запаковывает в монадический контекст 
связывание цепочки вычислений bind
Maybe monad m это Just или Nothing 
На практике  
Kind - функция которая принимает 2 типа и вернет тип
Either 
можно разные типа райта но лефт должен быть с фикс типом
оператор рыба <==< >==> композиция но для монад ассоциативная
Монада списка [] запаковывает в список и бинд делает склеивание списков замапенный
zen >> возвращает второй элемент сконкатенированный с первым ?
join - получить плоское зачение то есть если была склеенная монада Just(Just) то он уберт лишний контейнер
liftM поднятие функции в контекст 
||^ &&^ для булов монад
Законы монад
return a >>= f = f a
m >>= return m
(m >>= f) >>= g = m >>= (\x -> f x >>= g) ассоциативность
Writter monad 
